@model SuperService_MVC.Models.IngredientViewModel
@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var numericValidationMessage = "Value must be numeric and none negative";
    var stringValidationMessage = "Allowed special characters: - . , : ! ? &";
}
<head>
    <script src="~/js/Scripts/Ingredients/Edit.js"></script>
</head>
<form asp-action="Edit">
    <div class="row input-group">
        <h1 id="HeaderDisplay">@Model.Name</h1>
        <h2 id="HeaderEditContainer" hidden="hidden">
            @Html.TextBoxFor(x => x.Name, new { @id = "HeaderEdit", @class = "form-control pb-0 mb-0" })
        </h2>
        <div>
            <a class="" id="HeaderToggle" href="#">
                <i class="fas fa-pencil-alt align-bottom mt-4 ml-1"></i>
            </a>
        </div>
    </div>
    <div class="row">
        @Html.ValidationMessageFor(x => x.Name, stringValidationMessage, new { @class = "validation-err", @id = "HeaderEditValidation", @hidden = "hidden" })
    </div>
    <hr class="solid row" />
    @Html.HiddenFor(x => x.IngredientID)
    <div class="row justify-content-between input-group">
        <label class="col-sm-5">Calories (kcal)</label>
        <label class="col-sm-5">Carbohydrates (g)</label>
    </div>
    <div class="row justify-content-between input-group">
        @Html.TextBoxFor(x => x.Calories, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.Calories}" })
        @Html.TextBoxFor(x => x.Carbohydrates, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.Carbohydrates}" })
    </div>
    <div class="row justify-content-between input-group">
        @Html.ValidationMessageFor(x => x.Calories, "Value must be a whole none negative number", new { @class = "validation-err", @id = "CaloriesValidation", @hidden = "hidden" })
        @Html.ValidationMessageFor(x => x.Carbohydrates, numericValidationMessage, new { @class = "validation-err", @id = "CarbohydratesValidation", @hidden = "hidden" })
    </div>
    <div class="row justify-content-between input-group">
        <label class="col-sm-5">Protein (g)</label>
        <label class="col-sm-5">Fat (g)</label>
    </div>
    <div class="row justify-content-between input-group">
        @Html.TextBoxFor(x => x.Protein, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.Protein}" })
        @Html.TextBoxFor(x => x.Fat, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.Fat}" })
    </div>
    <div class="row justify-content-between input-group">
        @Html.ValidationMessageFor(x => x.Protein, numericValidationMessage, new { @class = "validation-err", @id = "ProteinValidation", @hidden = "hidden" })
        @Html.ValidationMessageFor(x => x.Fat, numericValidationMessage, new { @class = "validation-err", @id = "FatValidation", @hidden = "hidden" })
    </div>
    <div class="row justify-content-between input-group">
        <label class="col-sm-5">Salt (g)</label>
        <label class="col-sm-5">Sugar (g)</label>
    </div>
    <div class="row justify-content-between input-group">
        @Html.TextBoxFor(x => x.Salt, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.Salt}" })
        @Html.TextBoxFor(x => x.Sugar, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.Sugar}" })
    </div>
    <div class="row justify-content-between input-group">
        @Html.ValidationMessageFor(x => x.Salt, numericValidationMessage, new { @class = "validation-err", @id = "SaltValidation", @hidden = "hidden" })
        @Html.ValidationMessageFor(x => x.Sugar, numericValidationMessage, new { @class = "validation-err", @id = "SugarValidation", @hidden = "hidden" })
    </div>
    <div class="row justify-content-between input-group">
        <label class="col-sm-5">Stock</label>
    </div>
    <div class="row justify-content-between input-group">
        @Html.TextBoxFor(x => x.NumberInStock, new { @class = "col-sm-5 form-control", @placeholder = $"{Model.NumberInStock}" })
    </div>
    <div class="row justify-content-between input-group">
        @Html.ValidationMessageFor(x => x.NumberInStock, numericValidationMessage, new { @class = "validation-err", @id = "NumberInStockValidation", @hidden = "hidden" })
    </div>
    <div class="row input-group">
        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </div>
</form>

